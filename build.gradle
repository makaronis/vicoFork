/*
 * Copyright 2023 by Patryk Goworowski and Patrick Michalik.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import io.gitlab.arturbosch.detekt.Detekt

buildscript {

    apply from: "versions.gradle"

    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }

    dependencies {

        classpath libs.buildTools
        classpath libs.kotlinGradlePlugin
    }
}

plugins {

    alias libs.plugins.detekt
    alias libs.plugins.dokka apply false
}

dependencies {

    detektPlugins libs.detektFormatting
}

detekt {

    buildUponDefaultConfig = true
    source = files("sample", "vico/core", "vico/compose", "vico/views", "vico/compose-m3", "vico/compose-m2")
    config = files(".idea/detekt-config.yml")
}

tasks.register("detektFix", Detekt) {

    autoCorrect = true
    buildUponDefaultConfig = true
    source = files("sample", "vico/core", "vico/compose", "vico/views", "vico/compose-m3", "vico/compose-m2")
    config.setFrom(files(".idea/detekt-config.yml"))
}

allprojects {

    repositories {

        google()
        mavenLocal()
        mavenCentral()
    }
}

tasks.withType(Detekt).configureEach {

    jvmTarget = JavaVersion.VERSION_1_8.toString()

    reports {
        html {
            enabled = true
            destination = file("build/reports/detekt/detekt.html")
        }
    }
}

task clean(type: Delete) {

    delete rootProject.buildDir
}

tasks.register("assembleVico") { task ->
    task.dependsOn "clean"
    allprojects.forEach { project ->
        if (project.parent != null && project.parent.name.contains("vico")) {
            task.dependsOn "${project.parent.name}:${project.name}:assembleRelease"
        }
    }
}

project(":vico").tasks.configureEach { subtask ->

    if (subtask.name.contains("publishVicoCorePublication")) {
        subtask.mustRunAfter(":assembleVico")
    }
}
